is.na(doesitbecomenull)
T&doesitbecomenull
test <- trythis[[2]][!is.na(trythis[[2]])]
test <- na.omit(trythis[[2]])
test
test2 <- na.omit(trythis[[1]])
test2
class(test2)
typeof(test2)
mode(test2)
trythis$measName[1]
trythis$measName[1:3]
lookuplist$BDItotal[1]
lookupList$BDItotal[1]
lookupList$SSQNtotal[1]
lookupList$BDItotal$measName
lookupList[[1]]$measName
lookupList[[2]]$measName
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
atom <- c(NA)
atom[1]
atom <- NA
atom[1]
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
sum
apply
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x,h)
c <- 10
c(c = c)
c
list
cat
x <- NULL
if (!is.null(x) && !is.na(x)) {
print("yay")
}else{
print("boo")
}
if (!is.null(x) & !is.na(x)) {
print("yay")
}else{
print("boo")
}
rm(lookupList)
rm(atom)
rm(c)
rm(list = c("col.sums", "test", "test2", "x", "doesitbecomenull"))
rm(SSQNnoreverse)
rm(a)
rm(i)
rm(testturnalltolists)
ls()
rm(row.sums)
help(alist)
alist(trythis, S3)
x <- alist(trythis, S3)
x[1]
x[[1]]
typeof(alist(trythis, S3))
help(grepl)
grep("X1S", forwardscoredSsQN)
grep("X1S", forwardscoredSsQN)==0
grep("X1S", forwardscoredSsQN, value = T)
length(grep("X1S", forwardscoredSsQN, value = T)) > 0
length(grep("X1S", forwardscoredSsQN, value = T)) == 0
grep("X", forwardscoredSsQN, value = T)
grep("X", forwardscoredSsQN)
length(grep("X", forwardscoredSsQN))
length(grep("X1S", forwardscoredSsQN))
help("which")
grep("SSQ", names(S3))
help("warning")
warning(paste("There are", length(measIdx), "sheets that match", measName, "at", occasionNames[occ], "\n", "This measure at this occassion will not be scored.\n"))
fix(twoDfs[1])
fix(twoDfs[[1]])
edit(twoDfs[1])
edit(twoDfs[[1]])
rm(twoDfs)
rm(x)
initialDf <- data.frame(S3$BDI[1])
initialDf2 <- data.frame(S3$BDI[[1]])
rm(initialDf2)
initialDf <- S3$BDI[1]
initialDf2 <- S3$BDI[1]
is.data.frame(initialDf2)
is.list(initialDf2)
is.data.frame(possiblelookuplist)
intake <- workbookToDfList("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy/Intake.xlsx")
occassions <- list(intake, S3)
names(occassions)
alist(intake,S3)
names(occassions) <- alist(intake, S3)
names(occassions)
rm(list = c("initialDf", "initialDf2", "forwScorDf"))
rm(revScorDf)
rm(totalDf)
occasions[[1]][1]
occassions[[1]][1]
occassions[[1]][1][1]
occassions[[1]][[1]][1]
initialDf <- occasions[[1]][[1]][1]
initialDf <- occassions[[1]][[1]][1]
class(initialDf)
secondDf <- cbind(initialDf, SSQNreversincl)
names(secondDf)[2] <- "SSQN"
names(secondDf)[2] <- "SSQN_S3"
mergedDf <- merge(initialDf, secondDf, by = "Subject", all = T, sort = F, suffixes = c("1", "2"))
rm(mergedDf)
thirdDf <- cbind(initialDf, SSQNreversincl)
mergedDf <- merge(secondDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("1", "2"))
merge(mergedDf, by = "Subject", all = T, sort = F)
help(merge)
names(occassions[2])
names(occassions[[2]])
occassions[[2]]
occassions[[2]][2]
class(occassions[[2]][2])
class(occassions[[2]][[2]])
colnames(justSSQdatfrm)
names(initialDf)
colnames(justSSQdatfrm)[2]
colnames(justSSQdatfrm)[2] <- "moose"
colnames(justSSQdatfrm)
names(thirdDf)[2] <- "SSQ"
mergedDf <- merge(thirdDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "S3"))
mergedDf <- merge(secondDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "foo"))
mergedDf <- merge(thirdDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "S3"))
mergedDf2 <- merge(secondDf, mergedDf, by = "Subject", all = T, sort = F, suffixes = c("", "foo"))
foo <- "BDItotal"
possiblelookuplist$foo
possiblelookuplist[foo]
possiblelookuplist[[foo]]
possiblelookuplist[[foo]]$measName
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
debugSource('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
#returns the data frame
substobescored <- c("BDItotal", "SSQNtotal")
rm(list = c(initialDf, justSSQdatfrm))
rm(list = c('initialDf', 'justSSQdatfrm'))
rm(list = c('mergedDf', 'mergedDf2', 'secondDf', 'thirdDf'))
rm(list = c('foo', 'forwardscoredSsQN', 'occassions', 'revscoredSSQN', 'trythis'))
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megaScorer <- function(..., subscales, lookupList, idxOfSubj = 1){
}
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
occasions <- list(intake, S3)
occasionNames <- names(occasions) <- as.list(substitute(occasions))[-1L]
occasionNames <- names(occasions) <- as.list(substitute(list(intake, S3)))[-1L]
as.character(occassionNames)
as.character(occasionNames)
occasionNames <- names(occasions) <- as.character(substitute(list(intake, S3)))[-1L]
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
foo <- cbind(megatest, SSQNreversincl)
foo[1]
class(foo[1])
class(foo[,1])
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
c(occasionNames, NULL)
possiblelookuplist[[1]]$revInt <- list(NULL)
is.null(possiblelookuplist[[1]]$revInt)
filename <- paste(occasionNames, subscales, sep = "_")
filename <- paste(occasionNames, substobescored, sep = "_")
filename <- paste(occasionNames[1:length(occasionNames)], substobescored[1:length(substobescored)], sep = "_")
filename <- cat(occasionNames, subscales, sep = "_")
filename <- cat(occasionNames, substobescored, sep = "_")
filename <- print(occasionNames, substobescored, sep = "_")
typeof(cat(occasionNames, subscales, sep = "_"))
typeof(cat(occasionNames, substobescored, sep = "_"))
f <- cat("apple", "banana")
rm(f)
filename <- paste(occasionNames, sep = "_")
help(paste)
filename <- paste(occasionNames, substobescored, sep = "_", collapse = "_")
filename <- paste(paste(occasionNames, sep = "_", collapse = "_"), paste(substobescored, sep= "_", collapse = "_"), sep = "_")
filename <- paste(paste(occasionNames, collapse = "_"), paste(substobescored, collapse = "_"), sep = "_")
help(write.xlsx)
help(tempdir)
tempdir()
getwd()
paste(filename, ".xlsx", sep = "")
filename <- paste(paste(occasionNames, "_", sep = "", collapse = "_"), paste(substobescored, collapse = "_"), ".xlsx", sep = "")
filename <- paste(paste(occasionNames, sep = "", collapse = "_"), paste(substobescored, collapse = "_"), ".xlsx", sep = "")
filename <- paste(paste(occasionNames, ".", sep = "", collapse = "_"), paste(substobescored, collapse = "_"), ".xlsx", sep = "")
filename <- paste(paste(occasionNames, ".", sep = "", collapse = "_"), paste(substobescored, collapse = "_"), ".xlsx", sep = "")
filename <- paste(paste(occasionNames, collapse = "_"), "_", paste(substobescored, collapse = "_"), ".xlsx", sep = "")
xlsx::write.xlsx(megatest, file = filename, sheetName = "Scored")
xlsx::write.xlsx(megatest, file = filename, sheetName = "Scored", row.names = F, showNA = F)
help(apply)
foo <- megatest[["S3_BDItotal"]]
itemvec <- foo
fm(foo)
rm(foo)
is.na(iitemvec)
is.na(itemvec)
propMissing <- function(itemvec){
prop <- sum(is.na(itemvec))/length(itemvec)
return(prop)
}
propMissing(itemvec)
intake$BDI
class(intake$BDI)
class(intake["BDI"])
class(intake[["BDI"]])
items <- possiblelookuplist$BDItotal$forwNames
apply(intake$BDI[,items], 1, propMissing)
View(intake$BDI)
apply(S3$BDI[,items], 1, propMissing)
help("round")
round(apply(S3$BDI[,items], 1, propMissing), digits = 3)
View(S3$BDI)
round(apply(S3$BDI[,items], 1, propMissing), digits = 2)
round(100*apply(S3$BDI[,items], 1, propMissing), digits = 2)
percentMissing <- function(itemvec){
#calculates the proportion of the items in the vector that are
prop <- sum(is.na(itemvec))/length(itemvec)
prop <- round(100*prop, digits = 2)
return(prop)
}
apply(S3$BDI[,items], 1, percentMissing)
signif(100*apply(S3$BDI[,items], 1, propMissing), digits = 5)
possiblelookuplist$BDItotal$revInt <- list()
class(c(possiblelookuplist$BDItotal$forwNames, possiblelookuplist$BDItotal$revInt))
possiblelookuplist$BDItotal$revInt <- NA
class(c(possiblelookuplist$BDItotal$forwNames, possiblelookuplist$BDItotal$revInt))
length(c(possiblelookuplist$BDItotal$forwNames, possiblelookuplist$BDItotal$revInt))
possiblelookuplist$BDItotal$revInt <- c()
class(possiblelookuplist$SSQNtotal$revNames)
totlitemlest <- c(possiblelookuplist$SSQNtotal$forwNames, possiblelookuplist$SSQNtotal$revNames)
totlitemlest
totlitemlest <- c(possiblelookuplist$BDItotal$forwNames, possiblelookuplist$BDItotal$revNames)
totlitemlest
class(na.omit(totlitemlest))
length(na.omit(totlitemlest))
help("character")
possiblelookuplist$SSQStotal$revInt <- character(length=0)
is.null(revInt)
is.null(possiblelookuplist$SSQStotal$revInt)
help("numeric")
length(c(possiblelookuplist$SSQStotal$forwNames, possiblelookuplist$SSQStotal$revInt))
class(c(possiblelookuplist$SSQStotal$forwNames, possiblelookuplist$SSQStotal$revInt))
class(apply(S3$BDI[,items], 1, percentMissing))
class(megatest[,1])
class(megatest[[,1])
class(megatest[[,1]])
missingvec <- apply(S3$BDI[,items], 1, percentMissing)
class(cbind(megatest[,1], missingvec))
help("as.data.frame")
class(megatest[1])
class(cbind(megatest[1], missingvec))
missingDf <- cbind(megatest[1], missingvec)
ls()
rm(list = ls()[-"intake", -"S3"])
rm(list = ls()[-4, -16])
rm(list = ls()[c(-4, -16)])
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
source('~/research/samcleanR/R/percentMissing.R', echo=TRUE)
source('~/research/samcleanR/R/calcPercentMissing.R', echo=TRUE)
getLookup("~/Documents/research/samcleanR/scoring_lookup.xlsx")
getLookup("~/research/samcleanR/scoring_lookup.xlsx")
0L
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
getLookup("~/research/samcleanR/scoring_lookup.xlsx")
lkp <- getLookup("~/research/samcleanR/scoring_lookup.xlsx")
getwd()
megaScored <- megaScorer(intake, S3, lookupList = lkp, writeToExcel = T)
subsc <- c("BDItotal", "SSQNtotal", "SSQStotal")
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/megaScorer.R')
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/megaScorer.R')
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/megaScorer.R')
cat("==== Now scoring ", subscales[subsc], " ====\n", sep = "")
getwd()
trypath <- paste(getwd(), "test.xlsx", sep = '')
trypath
trypath <- paste(getwd(), "/", "test.xlsx", sep = "")
trypath
source('~/research/samcleanR/R/megaScorer.R')
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T, path = "C:/Users/Sam/Desktop")
xlsx::write.xlsx(megaScored, file = trypath, sheetName = "Scored", row.names = F, showNA = F)
source('~/research/samcleanR/R/megaScorer.R')
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T, path = "C:/Users/Sam/Desktop")
megaScored <- megaScorer(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T)
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp)
source('~/research/samcleanR/R/percentMissing.R', echo=TRUE)
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp)
View(missingdf)
help("as.double")
source('~/research/samcleanR/R/percentMissing.R')
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp)
View(missingdf)
source('~/research/samcleanR/R/percentMissing.R')
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
getwd()
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T, path = "C:/Users/Sam/Desktop")
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T, path = "C:/Users/Sam/Desktop")
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
source('~/research/samcleanR/R/megaMissingness.R')
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
missingdf <- megaMissingness(intake, S3, subscales = subsc, lookupList = lkp, writeToExcel = T, path = "C:/Users/Sam/Desktop")
getwd()
devtools::document()
devtools::document()
library(samcleanR)
rm(list = ls())
help(xlsx)
library(xlsx)
help(xlsx)
"xlsx"
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
setwd("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy")
filelist <- list.files()[c(-3, -4, -22, -23, -24)]
filelist <- c(filelist[2:4], filelist[12:19], filelist[5:11], filelist[1])
Intake <- workbookToDfList(filelist[1])
Pre-S1 <- workbookToDfList(filelist[2])
help(sub)
sub(".xlsx", "", filelist)
rm(list = ls())
filenames  <- c("S1", "S2", "S3")
subscales <- c("BDItotal", "SSQNtotal", "SSQStotal","HRSD6total", "HAMD6total")
lkp <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
library(samcleanR)
lkp <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
setwd("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy")
occasions <- filenames
filenames  <- c("S1.xlsx", "S2.xlsx", "S3.xlsx")
occasions <- filenames
occasionNames <- sub(".xlsx", "", filenames)
myStartRow <- 3
idxOfSubj = 1
bigDf <- xlsx::read.xlsx2(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, stringsAsFactors = F)[idxOfSubj]
class(bigDf)
subjChar <- names(bigDf)
for (subsc in 1:length(subscales)){
#... and gets the appropriate measure names and scoring information from the lookup table
measName <- lookupList[[subscales[subsc]]]$measName
forwItems <- lookupList[[subscales[subsc]]]$forwItems
revItems <- lookupList[[subscales[subsc]]]$revItems
revInt <- lookupList[[subscales[subsc]]]$revInt
#tells the user which subscale is being scored
cat("==== Now scoring ", subscales[subsc], " ====\n", sep = "")
#then, for each occasion, scores that subscale as follows.
for (occ in 1:length(occasions)){
#reads in the workbook as a "workbook" object
wb <- xlsx::loadWorkbook(filenames[occ])
#creates a character vector of all sheet names within the workbook
sheetNames <- names(xlsx::getSheets(wb))
#creates a character vector of the sheet names that do NOT contain the word "check"
sheetNames <- grep("check", sheetnames, ignore.case = T, value = T, invert = T)
#creates a vector of indices of the data frames in the current occasion that match the measure needed for the current subscale
measIdx <- grep(measName, sheetNames, ignore.case = T)
#if no sheets match, tells the user that the measure was not collected at the time point
if(length(measIdx) == 0){
cat("The", measName, "was not collected at", occasionNames[occ], "\n")
}else if (length(measIdx) > 1){
#if there is more than one sheet that matches the measure name, warns the user that there might be an error and does not score the measure
warning(paste("There are", length(measIdx), "sheets that match", measName, "at", occasionNames[occ], ", so this measure at this occasion will not be scored.\n"))
}else if (length(measIdx) == 1){
#tell the user what occasion is being scored
cat("Scoring", occasionNames[occ], subscales[subsc], "\n")
#read in the necessary sheet to a data frame
measDf <- xlsx::read.xlsx2(filenames[occ], sheetName = measName, header = T, startRow = myStartRow, stringsAsFactors = F)
#if mean substitution requested, replaces the data frame with one in which item means are substituted for missing values (for those subjects that meet the missingness criterion)
if (meanSub){
measDf <- meanSubstitute(measDf, forwItems = forwItems, revItems = revItems, revInt = revInt, criterion = criterion)
}
#creates a two-column data frame with the subject IDs and the total scores
littleDf <- calcSubscale(measDf, forwItems = forwItems, revItems = revItems, revInt = revInt)
#names the column containing the total score with the name of the subscale and the occasion
colnames(littleDf)[2] <- paste(occasionNames[occ], subscales[subsc], sep = "_")
#merges the new data frame with the previous data frame, by whatever name is given to subjects in these data sets (in my data sets it's just "Subject")
bigDf <- merge(bigDf, littleDf, by = subjChar, all = T, sort = F, suffixes = c("", occasionNames[occ]))
}
}
}
if(writeToExcel == T){
}
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
getwd()
trydf <- megaScorer(filenames, subscales = subscales, lookupList = lkp)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
trydf <- megaScorer(filenames, subscales = subscales, lookupList = lkp)
megaScorer(filenames, subscales, lkp)
setwd("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy")
class(xlsx::read.xlsx2(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, stringsAsFactors = F)[idxOfSubj])
class(xlsx::read.xlsx2(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, stringsAsFactors = F))
filenames[1]
help(read.xlsx2)
class(xlsx::read.xlsx(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, stringsAsFactors = F))
system.time({class(xlsx::read.xlsx(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, stringsAsFactors = F))})
system.time({class(xlsx::read.xlsx2(filenames[1], sheetIndex = 1, header = T, startRow = myStartRow, colClasses = NA, stringsAsFactors = F))})
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
system.time({foo <- megaScorer(filenames, subscales, lkp)})
source('~/research/samcleanR/R/megaScorer.R')
system.time({foo <- megaScorer(filenames, subscales, lkp)})
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
source('~/research/samcleanR/R/meanSubstitute.R', echo=TRUE)
source('~/research/samcleanR/R/megaMissingness.R', echo=TRUE)
source('~/research/samcleanR/R/calcPercentMissing.R', echo=TRUE)
source('~/research/samcleanR/R/percentMissing.R', echo=TRUE)
system.time({foo <- megaScorer(filenames, subscales, lkp)})
filenames <- c(filenames, "Pre-S1.xlsx")
filenames
system.time({foo2 <- megaScorer(filenames, subscales, lkp, writeToExcel = TRUE)})
install.packages("ggplot2")
install.packages("pryr")
devtools::install_github("hadley/lineprof")
system.time({foo2 <- megaScorer("Pre-S1.xlsx", subscales, lkp, writeToExcel = TRUE)})
install.packages("XLConnect")
help(XLConnect)
help(XLConnect)
library(XLConnect)
system.time({wb <- loadWorkbook("Pre-S1.xlsx")})
bzuh <- getSheets(wb)
help(loadWorkbook)
class(readWorksheet(wb, sheet = bzuh[2], startRow = 3))
readWorksheetFromFile(filenames[1], sheet = 1, startRow = myStartRow)[1]
class(readWorksheetFromFile(filenames[1], sheet = 1, startRow = myStartRow)[1])
names(readWorksheetFromFile(filenames[1], sheet = 1, startRow = myStartRow)[1])
source('~/research/samcleanR/R/megaScorer.R')
source('~/research/samcleanR/R/megaScorer.R')
help(writeWorksheetToFile)
writeWorksheetToFile("foo.xlsx", foo, sheet = 1)
writeWorksheetToFile("foo.xlsx", foo, sheet = "scoooooore")
getwd()
source('~/research/samcleanR/R/megaScorer.R')
source('~/research/samcleanR/R/megaScorer.R')
megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 40)
rm(bigDf)
gc()
source('~/research/samcleanR/R/megaScorer.R')
megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 40)
source('~/research/samcleanR/R/megaScorer.R')
bar <- megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 40)
View(bar)
rm(bar)
rm(foo)
rm(bzuh)
rm(wb)
rm(occasionNames)
rm(occasions)
rm(megaMissingness())
rm(megaMissingness
)
gc()
source('~/research/samcleanR/R/workbookToDfList.R')
source('~/research/samcleanR/R/getLookup.R')
lkp2 <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
lkp==lkp2
View(lkp)
source('~/research/samcleanR/R/meanSubstitute.R')
bar <- megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 20)
bar <- megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 80)
5/6
bar <- megaScorer(filenames, subscales = subscales, lookupList = lkp, writeToExcel = T, meanSub = T, criterion = 90)
rm(bar)
setwd("C:/Users/Sam/Documents/research/samcleanR")
