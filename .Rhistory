library(samcleanR)
thirdtry=dividevec(tryvec, 0)
thirdtry
thirdtry <- 1
thirdtry
thirdtry=dividevec(tryvec, 0)
thirdtry
help("edit"))
help("edit")
mymatrix = (NA, 5, 5)
mymatrix = matrix(NA, 5, 5)
mymatrix
mymatrix[c(1,2,3), c(3, 5)] = 5
mymatrix
edit(mymatrix)
mymatrix
newmatrix = edit(mymatrix)
newmatrix
help("names")
thing = newmatrix==5
thing
thing2 = newmatrix==NA
thing2
thing2 = newmatrix=='NA'
thing2
thing3 <- is.na(newmatrix)
thing3
help(pretty)
help("aggregate")
install.packages(c("xlsxjars", "xlsx"))
help(getSheets)
help(getsheets)
help(xlsx::getsheets)
help("Sheet")
library(xlsx)
Sys.getenv("R_ARCH")
library(rJava)
library(xlsx)
help("getSheets")
help("xlsx")
help("Workbook")
testwb <- loadWorkbook("C:/Users/Sam/Documents/research/samcleanR")
testwb <- loadWorkbook("C:/Users/Sam/Documents/research/samcleanR/S3.xlsx")
testwb
sheetnames <- getSheets(testwb)
sheetnames
trythis <- names(sheetnames)
trythis
help(grep)
trygrep <- grep("check", trythis, value = T, fixed = T)
trygrep
trygrep <- grep("check", trythis, value = T, fixed = T, invert = T)
trygrep
testsheetheaderT <- read.xlsx("C:/Users/Sam/Documents/research/samcleanR/S3.xlsx", sheetName = "BDI", header = T, startRow = 3)
head(testsheetheaderT, 10)
testsheetheaderF <- read.xlsx("C:/Users/Sam/Documents/research/samcleanR/S3.xlsx", sheetName = "BDI", header = T, startRow = 3)
head(testsheetheaderF, 5)
View(testsheetheaderT)
View(testsheetheaderF)
testsheetheaderT$X3
testsheetheaderF$X3
system.time{(testsheetheaderF$X3)}
system.time({testsheetheaderF$X3})
system.time({testsheetheaderT$X3})
testsheetheaderF <- read.xlsx("C:/Users/Sam/Documents/research/samcleanR/S3.xlsx", sheetName = "BDI", header = F, startRow = 3)
View(testsheetheaderF)
View(testsheetheaderF)
help("colnames")
headTnames <- colnames(testsheetheaderT)
headFnames <- colnames(testsheetheaderF)
typeof(testsheetheaderT[2,2])
typeof(testsheetheaderT[3,2])
typeof(testsheetheaderT[2,3])
typeof(testsheetheaderT[1,3])
help("write.xlsx")
write.xlsx(testsheetheaderT, "C:/Users/Sam/Documents/research/samcleanR/writetest.xlsx", sheetName = trygrep[1])
is.na(testsheetheaderT[1,3])
write.xlsx(testsheetheaderT, "C:/Users/Sam/Documents/research/samcleanR/writetest.xlsx", sheetName = trygrep[1], showNA = F)
write.xlsx(testsheetheaderT, "C:/Users/Sam/Documents/research/samcleanR/writetest.xlsx", sheetName = trygrep[1], showNA = F)
help("read.xlsx")
help("data.frame")
help("row.names")
rm(sheetnames)
sheetnames <- names(xlsx::getSheets(testwb))
measures <- grep("check", sheetnames, ignore.case = T, value = T, fixed = F, invert = T)
dfList = list()
dfList[measures] <- list(NULL)
dfList["BDI"]
dfList["BDI"] <- c(1,2,3)
dfList[1] <- c(1,2,3)
dfList["BDI"]
dfList$SSQ <- headTnames
dfList$BDI <- c(1,2,3)
dfList[measures[3]] <- c("a","b")
dfList[[measures[3]]] <- c("a","b")
dfList[[measures[4]] <- c("c","d")
dfList[[measures[4]]] <- c("c","d")
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
ls()
rm(list = ls()-"workbookToDfList")
rm(list = ls()-20)
toremove = ls(), -20
rm(list = ls()[-"workbookToDfList"])
rm(list = ls()[-workbookToDfList])
rm(list = ls()[-20])
testDfList <- workbookToDfList("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy/Intake.xlsx")
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
testDfList <- workbookToDfList("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy/Intake.xlsx")
library(devtools)
tail(testDfList$BASIS, 5)
document()
library(samcleanR)
devtools::use_package("xlsx")
library(samcleanR)
help(merge)
system.time({S3 <- workbookToDfList("C:/Users/Sam/Documents/research/samcleanR/S3.xlsx")})
S3$SSQ[1:5,"X2S"]
S3$SSQ[1:5,"X2N"]
forwardscoredSsQN <- paste("X", 1:6,"N", sep="")
SSQNtot <- sum(S3$SSQ[1:20, forwardscoredSsQN])
help("rowSums")
View(S3$SSQ)
SSQNtot <- colSums(S3$SSQ[1:20, forwardscoredSsQN])
SSQNtot
SSQNtot <- rowSums(S3$SSQ[1:20, forwardscoredSsQN])
SSQNtot
littlematrix <- S3$SSQ[6:10, 3:5]
littlematrix
7-littlematrix
justSSQdatfrm <- S3$SSQ
forscordf <- justSSQdatfrm[,forwardscoredSsQN]
names(justSSQdatfrm)
row.names(justSSQdatfrm)
help(is.null)
whathappensifyouaddnull <- littlematrix+NULL
whathappensifyouaddnull <- sum(littlematrix)
whathappensifyouaddnull <- sum(littlematrix, NULL)
whathappensifyouaddnull <- 0
whathappensifyouaddnull <- littlematrix
whathappensifyouaddnull2 <- littlematrix+0
whathappensifyouaddnull2 == whathappensifyouaddnull
trynewfunct <- calcSubscale(justSSQdatfrm, forwardscoredSsQN)
calcSubscale <- function(dataframe, fornames, revnames = NULL, revint = NULL, idxofsubj = 1){
#creates a data frame just of the items to be forward scored; note that this does not include subject names
forscordf <- dataframe[,fornames]
revscordf <- 0
if(!is.null(revnames) & !is.na(revnames)){
#creates a data frame just of the items to be reverse scored
revscordf <- dataframe[,revnames]
#reverse scores the reverse scored items by subtracting each value from the given integer
revscordf <- revint - revscordf
}
#sums across the forward and reverse scored items (if the latter exist) to create a total data frame
totaldf <- rowSums(forscordf) + rowSums(revscordf)
#assigns the subject names from the original data frame as the row names of the new data frame
row.names(totaldf) <- dataframe[,idxofsubj]
#returns the data frame
return(totaldf)
}
trynewfunct <- calcSubscale(justSSQdatfrm, forwardscoredSsQN)
calcSubscale <- function(dataframe, fornames, revnames = NULL, revint = NULL, idxofsubj = 1){
#creates a data frame just of the items to be forward scored; note that this does not include subject names
forscordf <- dataframe[,fornames]
revscordf <- 0
if(!is.null(revnames)){
#creates a data frame just of the items to be reverse scored
revscordf <- dataframe[,revnames]
#reverse scores the reverse scored items by subtracting each value from the given integer
revscordf <- revint - revscordf
}
#sums across the forward and reverse scored items (if the latter exist) to create a total data frame
totaldf <- rowSums(forscordf) + rowSums(revscordf)
#assigns the subject names from the original data frame as the row names of the new data frame
row.names(totaldf) <- dataframe[,idxofsubj]
#returns the data frame
return(totaldf)
}
trynewfunct <- calcSubscale(justSSQdatfrm, forwardscoredSsQN)
is.null(NULL)
!is.null(NULL)
obj <- NULL
!is.null(obj)
is.null(obj)
is.na(obj)
rowSums(0)
revScorDf <- data.frame(c(0,0), c(0,0))
revScorDf
revScorDf <- data.frame(a = c(0,0), b = c(0,0))
revScorDf
rowSums(0)
rowSums(revScorDf)
nrow(justSSQdatfrm)
revScorDf <- data.frame(rep(0,times=nrow(justSSQdatfrm)))
revScorDf
revScorDf <- data.frame(zeroes = rep(0,times=nrow(justSSQdatfrm)))
revScorDf
7-revScorDf
revscoredSSQN = c("X2S", "X3S")
ls()
rm(list = ls()[c(-3, -4, -8,-9)])
forwScorDf <- justSSQdatfrm[,forwardscoredSsQN]
revScorDf <- data.frame(zeroes = rep(0,times=nrow(justSSQdatfrm)))
totalDf <- rowSums(forwScorDf) + rowSums(revScorDf)
row.names(totalDf) <- justSSQdatfrm[,1]
help("row.names")
row.names(totalDf)
whaaa <- row.names(totalDf)
whaaa
totalDf <- as.data.frame(rowSums(forwScorDf) + rowSums(revScorDf))
totalDf
rownames(totalDf) <- justSSQdatfrm[,1]
head(totalDf, 5)
rm(totalDf)
rm(whaaa)
revScorDf <- justSSQdatfrm[,revscoredSSQN]
revScorDf <- 7-revScorDf
totalDf <- as.data.frame(rowSums(forwScorDf) + rowSums(revScorDf))
calcSubscale <- function(dataFrame, forwNames, revNames = NULL, revInt = NULL, idxOfSubj = 1){
#creates a data frame just of the items to be forward scored; note that this does not include subject names
forwScorDf <- dataFrame[,forwNames]
#creates
revScorDf <- data.frame(zeroes = rep(0,times=nrow(dataFrame)))
#checks if anything has been supplied to the revNames argument
if(!is.null(revNames)){
#checks if the contents of the revNames argument is NA--this needs to be done within the first if statement because otherwise it might attempt to check whether a NULL is NA and throw an error
if(!is.na(revNames)){
#creates a data frame just of the items to be reverse scored
revScorDf <- dataFrame[,revNames]
#reverse scores the reverse scored items by subtracting each value from the given number
revScorDf <- revInt - revScorDf
}
}
#sums across the forward and reverse scored items to create a total data frame; if there are no reverse-scored items, zero is added to each row
totalDf <- as.data.frame(rowSums(forwScorDf) + rowSums(revScorDf))
#assigns the subject names from the original data frame as the row names of the new data frame
rownames(totalDf) <- dataFrame[,idxOfSubj]
#returns the data frame
return(totalDf)
}
SSQNnoreverse <- calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN)
SSQNnoreverse <- calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN, revNames = NA)
SSQNnoreverse <- calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN, revNames = NA, revInt = 3)
SSQNnoreverse
calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN, revNames = NA, revInt = 3, idxOfSubj = 2)
SSQNreversincl <- calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN, revNames = revscoredSSQN, revInt = 7)
calcSubscale <- function(dataFrame, forwNames, revNames = NULL, revInt = NULL, idxOfSubj = 1){
#creates a data frame just of the items to be forward scored; note that this does not include subject names
forwScorDf <- dataFrame[,forwNames]
#creates
revScorDf <- data.frame(zeroes = rep(0,times=nrow(dataFrame)))
#checks if anything has been supplied to the revNames argument
if(!is.null(revNames)){
#checks if the first element of the revNames argument is NA--this needs to be done within the first if statement because otherwise it might attempt to check whether a NULL is NA and throw an error
if(!is.na(revNames[1])){
#creates a data frame just of the items to be reverse scored
revScorDf <- dataFrame[,revNames]
#reverse scores the reverse scored items by subtracting each value from the given number
revScorDf <- revInt - revScorDf
}
}
#sums across the forward and reverse scored items to create a total data frame; if there are no reverse-scored items, zero is added to each row
totalDf <- as.data.frame(rowSums(forwScorDf) + rowSums(revScorDf))
#assigns the subject names from the original data frame as the row names of the new data frame
rownames(totalDf) <- dataFrame[,idxOfSubj]
#returns the data frame
return(totalDf)
}
SSQNreversincl <- calcSubscale(S3$SSQ, forwNames = forwardscoredSsQN, revNames = revscoredSSQN, revInt = 7)
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
lookupList <- workbookToDfList("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx", mystartrow = 1)
help("as.list.data.frame")
help("drop")
lookupList$BDItotal$measName
!is.na(lookupList$BDItotal$measName)
lookupList$BDItotal$measName[!is.na(lookupList$BDItotal$measName)]
lookupList$BDItotal$measName <- lookupList$BDItotal$measName[!is.na(lookupList$BDItotal$measName)]
trythis <- as.list(lookupList$BDItotal)
trythis <- as.list(lookupList$SSQStotal)
for(forwardscoredSsQN){cat(forwardscoredSsQN, "\n")}
for(i in forwardscoredSsQN){cat(forwardscoredSsQN, "\n")}
help("apply")
letters
LETTERS
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
col.sums
row.sums <- apply(x, 1, sum)
twoDfs <- list(forwScorDf, revScorDf)
lapply(twoDfs, sum, na.rm=T)
testturnalltolists <- lapply(lookupList, as.list)
trythis[[1]][!is.na(trythis[[1]])]
trythis[1]
!is.na(trythis[[1]])
doesitbecomenull <- trythis[[4]][!is.na(trythis[[4]])]
doesitbecomenull
class(doesitbecomenull)
help("na.omit")
doesitbecomenull <- na.omit(trythis[[4]])
doesitbecomenull
a <- na.omit(trythis[[1]])
a
cat(a, "wtf")
is.null(doesitbecomenull)
is.na(doesitbecomenull)
T&doesitbecomenull
test <- trythis[[2]][!is.na(trythis[[2]])]
test <- na.omit(trythis[[2]])
test
test2 <- na.omit(trythis[[1]])
test2
class(test2)
typeof(test2)
mode(test2)
trythis$measName[1]
trythis$measName[1:3]
lookuplist$BDItotal[1]
lookupList$BDItotal[1]
lookupList$SSQNtotal[1]
lookupList$BDItotal$measName
lookupList[[1]]$measName
lookupList[[2]]$measName
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
atom <- c(NA)
atom[1]
atom <- NA
atom[1]
source('~/research/samcleanR/R/getLookup.R', echo=TRUE)
possiblelookuplist <- getLookup("C:/Users/Sam/Documents/research/samcleanR/scoring_lookup.xlsx")
sum
apply
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x,h)
c <- 10
c(c = c)
c
list
cat
x <- NULL
if (!is.null(x) && !is.na(x)) {
print("yay")
}else{
print("boo")
}
if (!is.null(x) & !is.na(x)) {
print("yay")
}else{
print("boo")
}
rm(lookupList)
rm(atom)
rm(c)
rm(list = c("col.sums", "test", "test2", "x", "doesitbecomenull"))
rm(SSQNnoreverse)
rm(a)
rm(i)
rm(testturnalltolists)
ls()
rm(row.sums)
help(alist)
alist(trythis, S3)
x <- alist(trythis, S3)
x[1]
x[[1]]
typeof(alist(trythis, S3))
help(grepl)
grep("X1S", forwardscoredSsQN)
grep("X1S", forwardscoredSsQN)==0
grep("X1S", forwardscoredSsQN, value = T)
length(grep("X1S", forwardscoredSsQN, value = T)) > 0
length(grep("X1S", forwardscoredSsQN, value = T)) == 0
grep("X", forwardscoredSsQN, value = T)
grep("X", forwardscoredSsQN)
length(grep("X", forwardscoredSsQN))
length(grep("X1S", forwardscoredSsQN))
help("which")
grep("SSQ", names(S3))
help("warning")
warning(paste("There are", length(measIdx), "sheets that match", measName, "at", occasionNames[occ], "\n", "This measure at this occassion will not be scored.\n"))
fix(twoDfs[1])
fix(twoDfs[[1]])
edit(twoDfs[1])
edit(twoDfs[[1]])
rm(twoDfs)
rm(x)
initialDf <- data.frame(S3$BDI[1])
initialDf2 <- data.frame(S3$BDI[[1]])
rm(initialDf2)
initialDf <- S3$BDI[1]
initialDf2 <- S3$BDI[1]
is.data.frame(initialDf2)
is.list(initialDf2)
is.data.frame(possiblelookuplist)
intake <- workbookToDfList("C:/Users/Sam/Dropbox/IPT-CBT RCT_Original Excel Data Files_Unshared_Sam copy/Intake.xlsx")
occassions <- list(intake, S3)
names(occassions)
alist(intake,S3)
names(occassions) <- alist(intake, S3)
names(occassions)
rm(list = c("initialDf", "initialDf2", "forwScorDf"))
rm(revScorDf)
rm(totalDf)
occasions[[1]][1]
occassions[[1]][1]
occassions[[1]][1][1]
occassions[[1]][[1]][1]
initialDf <- occasions[[1]][[1]][1]
initialDf <- occassions[[1]][[1]][1]
class(initialDf)
secondDf <- cbind(initialDf, SSQNreversincl)
names(secondDf)[2] <- "SSQN"
names(secondDf)[2] <- "SSQN_S3"
mergedDf <- merge(initialDf, secondDf, by = "Subject", all = T, sort = F, suffixes = c("1", "2"))
rm(mergedDf)
thirdDf <- cbind(initialDf, SSQNreversincl)
mergedDf <- merge(secondDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("1", "2"))
merge(mergedDf, by = "Subject", all = T, sort = F)
help(merge)
names(occassions[2])
names(occassions[[2]])
occassions[[2]]
occassions[[2]][2]
class(occassions[[2]][2])
class(occassions[[2]][[2]])
colnames(justSSQdatfrm)
names(initialDf)
colnames(justSSQdatfrm)[2]
colnames(justSSQdatfrm)[2] <- "moose"
colnames(justSSQdatfrm)
names(thirdDf)[2] <- "SSQ"
mergedDf <- merge(thirdDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "S3"))
mergedDf <- merge(secondDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "foo"))
mergedDf <- merge(thirdDf, thirdDf, by = "Subject", all = T, sort = F, suffixes = c("", "S3"))
mergedDf2 <- merge(secondDf, mergedDf, by = "Subject", all = T, sort = F, suffixes = c("", "foo"))
foo <- "BDItotal"
possiblelookuplist$foo
possiblelookuplist[foo]
possiblelookuplist[[foo]]
possiblelookuplist[[foo]]$measName
source('~/research/samcleanR/R/workbookToDfList.R', echo=TRUE)
debugSource('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
#returns the data frame
substobescored <- c("BDItotal", "SSQNtotal")
rm(list = c(initialDf, justSSQdatfrm))
rm(list = c('initialDf', 'justSSQdatfrm'))
rm(list = c('mergedDf', 'mergedDf2', 'secondDf', 'thirdDf'))
rm(list = c('foo', 'forwardscoredSsQN', 'occassions', 'revscoredSSQN', 'trythis'))
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megaScorer <- function(..., subscales, lookupList, idxOfSubj = 1){
}
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
occasions <- list(intake, S3)
occasionNames <- names(occasions) <- as.list(substitute(occasions))[-1L]
occasionNames <- names(occasions) <- as.list(substitute(list(intake, S3)))[-1L]
as.character(occassionNames)
as.character(occasionNames)
occasionNames <- names(occasions) <- as.character(substitute(list(intake, S3)))[-1L]
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
foo <- cbind(megatest, SSQNreversincl)
foo[1]
class(foo[1])
class(foo[,1])
source('~/research/samcleanR/R/calcSubscale.R', echo=TRUE)
source('~/research/samcleanR/R/megaScorer.R', echo=TRUE)
megatest <- megaScorer(intake, S3, subscales = substobescored, lookupList = possiblelookuplist)
c(occasionNames, NULL)
possiblelookuplist[[1]]$revInt <- list(NULL)
is.null(possiblelookuplist[[1]]$revInt)
