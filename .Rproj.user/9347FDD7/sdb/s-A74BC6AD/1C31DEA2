{
    "contents" : "#' Creates a data frame containing the proportion of items that are missing for a given set of subscales and measurement occasions for each subject.\n#'\n#' @param ... One or more lists that contain named data frames as their elements. Each list in my data set corresponds to a measurement occasion.\n#' @param subscales A character vector of the names of subscales for which the user wants to know missingness.\n#' @param lookupList A list object that contains scoring \"instructions\" for each subscale.\n#' @param idxOfSubj The column index in the data frames that contains subject IDs. Default is 1.\n#' @return A data frame containing the proportion of values that are missing for each subject and occasion. That is, each subject gets a row, and each subscale-occasion combo gets its own column.\n#' @export\n\ngetMissingness <- function(..., subscales, lookupList, idxOfSubj = 1){\n  #makes all of the lists of data frames into a list of lists of data frames (ouch!)\n  occasions <- list(...)\n  #gives each list the name of the list item as passed in, and also assigns this character vector to occasionNames\n  occasionNames <- names(occasions) <- as.character(substitute(list(...)))[-1L]\n\n  #creates a one-column data frame with just subject names ...\n  missingDf <- occasions[[1]][[1]][idxOfSubj]\n  #gets the character name of the subject column just in case it's something other than \"Subjects\"!\n  subjChar <- names(missingDf)\n\n  #loops through each of the subscales requested ...\n  for (subsc in 1:length(subscales)){\n\n    #... and gets the appropriate measure names and scoring information from the lookup table\n    measName <- lookupList[[subscales[subsc]]]$measName\n    forwNames <- lookupList[[subscales[subsc]]]$forwNames\n    revNames <- lookupList[[subscales[subsc]]]$revNames\n    revInt <- lookupList[[subscales[subsc]]]$revInt\n    #tells the user which subscale is being checked\n    cat(\"Now checking\", subscales[subsc], \"\\n\")\n\n    #then, for each occasion, calculates missingness for that subscale as follows.\n    for (occ in 1:length(occasions)){\n      #creates a vector of indices of the data frames in the current   occasion that match the measure needed for the current subscale\n      measIdx <- grep(measName, names(occasions[[occ]]), ignore.case = T)\n\n      if(length(measIdx) == 0){\n\n        #if no data frames match, tells the user that the measure was not collected at the time point\n        cat(\"The\", measName, \"was not collected at\", occasionNames[occ], \"\\n\")\n      }else if (length(measIdx) > 1){\n\n        #if there is more than one data frame that matches the measure name, warns the user that there might be an error and does not score the measure\n        warning(paste(\"There are\", length(measIdx), \"sheets that match\", measName, \"at\", occasionNames[occ], \", so missingness at this occasion will not be computed.\\n\"))\n      }else if (length(measIdx) == 1){\n        #tell the user what occasion is being scored\n        cat(\"Now computing missingness at\", occasionNames[occ], \"for\", subscales[subsc], \"\\n\")\n\n\n        #######stopped here on 6/5 at 9:30 p.m.\n\n\n                #creates a two-column data frame with the subject IDs and the total scores\n        littleDf <- calcSubscale(occasions[[occ]][[measIdx]], forwNames = forwNames, revNames = revNames, revInt = revInt)\n        #gives the total score the name of the subscale and the occasion\n        colnames(littleDf)[2] <- paste(occasionNames[occ], subscales[subsc], sep = \"_\")\n        #merges the new data frame with the previous data frame, by whatever name is given to subjects in these data sets (in my data sets it's just \"Subject\")\n        bigDf <- merge(bigDf, littleDf, by = subjChar, all = T, sort = F, suffixes = c(\"\", occasionNames[occ]))\n      }\n    }\n  }\n  return(bigDf)\n}\n\n\n\n\n\n",
    "created" : 1433550159038.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3395101803",
    "id" : "1C31DEA2",
    "lastKnownWriteTime" : 1433600566,
    "path" : "~/research/samcleanR/R/getMissingness.R",
    "project_path" : "R/getMissingness.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}